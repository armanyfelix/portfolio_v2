/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateProyectArgs } from "./CreateProyectArgs";
import { UpdateProyectArgs } from "./UpdateProyectArgs";
import { DeleteProyectArgs } from "./DeleteProyectArgs";
import { ProyectFindManyArgs } from "./ProyectFindManyArgs";
import { ProyectFindUniqueArgs } from "./ProyectFindUniqueArgs";
import { Proyect } from "./Proyect";
import { ProyectService } from "../proyect.service";
@graphql.Resolver(() => Proyect)
export class ProyectResolverBase {
  constructor(protected readonly service: ProyectService) {}

  async _proyectsMeta(
    @graphql.Args() args: ProyectFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Proyect])
  async proyects(
    @graphql.Args() args: ProyectFindManyArgs
  ): Promise<Proyect[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Proyect, { nullable: true })
  async proyect(
    @graphql.Args() args: ProyectFindUniqueArgs
  ): Promise<Proyect | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Proyect)
  async createProyect(
    @graphql.Args() args: CreateProyectArgs
  ): Promise<Proyect> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Proyect)
  async updateProyect(
    @graphql.Args() args: UpdateProyectArgs
  ): Promise<Proyect | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Proyect)
  async deleteProyect(
    @graphql.Args() args: DeleteProyectArgs
  ): Promise<Proyect | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
